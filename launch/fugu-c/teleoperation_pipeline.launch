<launch>

  <!-- 
    To use the PS3 Dualshock3 Sixpair joystick, run as root
      rosrun ps3joy ps3joy.py
    You need to pair the joystick with your bluetooth system once.
    Follow the instructions on the ROS package ps3joy wiki page
      http://www.ros.org/wiki/ps3joy
  -->

  <arg name="run_altitude_controller" default="false"/>
  <arg name="run_depth_controller" default="false"/>

  <!-- joy node -->
  <node pkg="joy" type="joy_node" name="joy_node" output="screen">
    <rosparam file="$(find fugu_configurations)/joystick/params.yaml" />
  </node>
  
  <!-- teleoperation_joy node -->
  <node pkg="fugu_teleoperation" type="fugu_teleop_joy_node" name="fugu_teleoperation" output="screen">
    <rosparam file="$(find fugu_configurations)/teleoperation_joy/params.yaml" />
    <rosparam param="motor_policy"  file="$(find fugu_configurations)/teleoperation_joy/motor_policy_params.yaml" />
    <rosparam param="wrench_policy" file="$(find fugu_configurations)/teleoperation_joy/wrench_policy_params.yaml" />
    <rosparam param="altitude_control_wrench_policy" file="$(find fugu_configurations)/teleoperation_joy/altitude_control_wrench_policy_params.yaml" />
    <rosparam param="depth_control_wrench_policy" file="$(find fugu_configurations)/teleoperation_joy/depth_control_wrench_policy_params.yaml" />
    <rosparam param="twist_policy"  file="$(find fugu_configurations)/teleoperation_joy/twist_policy_params.yaml" />
    <remap from="motor_levels" to="motor_board/speeds_pc" />
    <remap from="enable_altitude_control" to="altitude_controller/enable" />
    <remap from="enable_depth_control" to="depth_controller/enable" />
  </node>

  <group if="$(arg run_altitude_controller)">
    <node pkg="auv_control" type="altitude_controller.py" name="altitude_controller" output="screen">
      <rosparam file="$(find fugu_configurations)/auv_control/altitude_controller.yaml" />
      <remap from="altitude" to="visual_altimeter/altitude"/>
      <remap from="~wrench_output" to="wrench_levels"/>
      <remap from="~wrench_input" to="fugu_teleoperation/altitude_control_wrench_policy/wrench_request" />
      <remap from="~altitude_request" to="fugu_teleoperation/altitude_control_wrench_policy/altitude_request" />
    </node>
    <node pkg="visual_altimeter" type="visual_altimeter" name="visual_altimeter">
      <remap from="point_cloud" to="stereo_down/scaled/points2"/>
    </node>
  </group>

  <group if="$(arg run_depth_controller)">
    <node pkg="auv_control" type="depth_controller.py" name="depth_controller" output="screen">
      <rosparam file="$(find fugu_configurations)/auv_control/depth_controller.yaml" />
      <remap from="depth" to="motor_board/depth"/>
      <remap from="~wrench_output" to="wrench_levels"/>
      <remap from="~wrench_input" to="fugu_teleoperation/depth_control_wrench_policy/wrench_request" />
      <remap from="~depth_request" to="fugu_teleoperation/depth_control_wrench_policy/depth_request" />
    </node>
  </group>

  <node pkg="twist_control" type="twist_control_node" name="twist_control_node" output="screen" >
    <param name="pid_info_url" value="$(find fugu_configurations)/auv_control/twist_controller.yaml" />
    <param name="pid_name" value="twist_PID" />
    <param name="pid_response_hz" value="10.0" />
    <remap from="set_info" to="set_twist_pid_info" />
    <remap from="twist_levels" to="/twist_levels" />
    <remap from="wrench_levels" to="/wrench_levels" />
    <remap from="odometry" to="/stereo_odometer/odometry" />
  </node>

</launch>
